import * as _ from 'lodash'
import * as React from 'react'
import {computed, action} from 'mobx'
import {observer} from 'mobx-react'
import ChartEditor from './ChartEditor'
import {ChartTypeType} from '../charts/ChartType'
import {Toggle} from './Forms'

function slugify(s: string) {
	s = s.toLowerCase().replace(/\s*\*.+\*/, '').replace(/[^\w- ]+/g,'');
	return _.trim(s).replace(/ +/g,'-');
}

@observer
export default class EditorTextTab extends React.Component<{ editor: ChartEditor }> {
	get chart() {
		return this.props.editor.chart
	}

	lastTitle: string

	@action.bound onTitle(evt: React.FormEvent<HTMLInputElement>) { 
		var currentTitle = this.lastTitle || this.chart.props.title || "";
		var currentExpectedSlug = slugify(currentTitle);
		var currentSlug = this.chart.props.slug;

		// We only automatically update the slug to match title if it's an unpublished chart, to discourage changing them later
		// Also if the user manually enters a slug we should honour that and not change it
		if (!this.chart.props.isPublished && (_.isEmpty(currentSlug) || currentExpectedSlug == currentSlug)) {
			var slug = slugify(evt.currentTarget.value);
			this.chart.props.slug = slug
		}

		this.lastTitle = evt.currentTarget.value
		this.chart.props.title = evt.currentTarget.value 
	}

	@action.bound onSlug(evt: React.FormEvent<HTMLInputElement>) { this.chart.props.slug = evt.currentTarget.value }
	@action.bound onSubtitle(evt: React.FormEvent<HTMLTextAreaElement>) { this.chart.props.subtitle = evt.currentTarget.value }
	@action.bound onSource(evt: React.FormEvent<HTMLTextAreaElement>) { this.chart.props.sourceDesc = evt.currentTarget.value }
	@action.bound onNote(evt: React.FormEvent<HTMLTextAreaElement>) { this.chart.props.note = evt.currentTarget.value }
	@action.bound onInternalNotes(evt: React.FormEvent<HTMLTextAreaElement>) { this.chart.props.internalNotes = evt.currentTarget.value }

	render() {
		const { chart } = this

		return <div className="tab-pane active">
			<section>
				<h2>Title of the visualization</h2>
				<p className="form-section-desc">Avoid using specific countries or years in the title. The grapher will add this information automatically when it is appropriate.</p>
				<input className="form-control input-lg .col-xs-12" placeholder="Title (shorter is better)" type="text" value={chart.title} onInput={this.onTitle}/>
				<div className="input-group">
					<span className="input-group-addon">/grapher/</span>
					<input className="form-control .col-xs-12" title="Human-friendly URL slug for this chart" type="text" value={chart.slug} onInput={this.onSlug}/>
				</div>
			</section>	
			<section>
				<h2>Subtitle of the visualization</h2>
				<textarea className="form-control input-lg .col-xs-12" placeholder="Briefly describe the context of the data" value={chart.subtitle} onInput={this.onSubtitle} />
	   		</section>
			<section>
				<h2>Sources</h2>
				<textarea className="form-control input-lg .col-xs-12" placeholder="Override the autogenerated source names if needed" value={chart.sourceDesc} onInput={this.onSource}/>
			</section>
			<section>
				<h2>Footer note</h2>
				<textarea className="form-control input-lg .col-xs-12" placeholder="Any further relevant information e.g. adjustments or limitations" value={chart.note} onInput={this.onNote}/>
			</section>
			<section>						
				<h2>Internal author notes</h2>						
				<textarea className="form-control input-lg .col-xs-12" placeholder="WIP, needs review, etc" name="chart-notes" value={chart.internalNotes} onInput={this.onInternalNotes}/>
			</section>
		</div>
	}
}