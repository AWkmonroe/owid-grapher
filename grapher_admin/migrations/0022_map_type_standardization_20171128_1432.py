# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-11-28 14:32
from __future__ import unicode_literals
from django.db import migrations, models, transaction, connection
import json

def canFloat(v):
    try:
        float(v)
    except Exception:
        return False

    return True

def execute(apps, schema_editor):
    Chart = apps.get_model('grapher_admin', 'Chart')
    with transaction.atomic():
        for chart in Chart.objects.all():
            config = json.loads(chart.config)
            if 'map' in config:
                if 'colorSchemeMinValue' in config['map']:
                    if config['map']['colorSchemeMinValue'] is None or config['map']['colorSchemeMinValue'] == "":
                        del config['map']['colorSchemeMinValue']
                    else:
                        config['map']['colorSchemeMinValue'] = float(config['map']['colorSchemeMinValue'])
                if 'colorSchemeValues' in config['map']:
                    if type(config['map']['colorSchemeValues']) is not list:
                        del config['map']['colorSchemeValues']
                    else:
                        config['map']['colorSchemeValues'] = [float(v) for v in config['map']['colorSchemeValues'] if canFloat(v)]
                        numBuckets = int(config['map']['colorSchemeInterval'])
                        if len(config['map']['colorSchemeValues']) > numBuckets:
                            config['map']['colorSchemeValues'] = config['map']['colorSchemeValues'][:numBuckets]
                if 'colorSchemeInterval' in config['map']:
                    del config['map']['colorSchemeInterval']

            config['id'] = chart.id
            config['title'] = chart.name
            config['slug'] = chart.slug
            config['internalNotes'] = chart.notes
            if 'chart-type' in config:
                del config['chart-type']
            config['type'] = chart.type
            if 'data-entry-url' in config:
                del config['data-entry-url']
            config['originUrl'] = chart.origin_url
            config['isPublished'] = chart.published
            if 'tabs' in config:
                config['hasChartTab'] = ('chart' in config['tabs'])
                config['hasMapTab'] = ('map' in config['tabs'])
                del config['tabs']
            if 'line-tolerance' in config:
                del config['line-tolerance']
            if 'line-type' in config:
                del config['line-type']
            if 'success' in config:
                del config['success']
            

            config['dimensions'] = list(chart.chartdimension_set.values())
            # XXX
            for dim in config['dimensions']:
                dim['chartId'] = dim.pop('chartId_id')
                dim['variableId'] = dim.pop('variableId_id')

            chart.config = json.dumps(config)
            chart.save()

class Migration(migrations.Migration):

    dependencies = [
        ('grapher_admin', '0021_auto_20171023_1501'),
    ]

    operations = [
        migrations.RunPython(execute),
    ]
