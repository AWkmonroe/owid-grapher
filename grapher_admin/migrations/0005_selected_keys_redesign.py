# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-06-02 04:13
from __future__ import unicode_literals
from django.db import migrations, models, transaction
import json

# This has become sorta the nvd3less migration in general
def selectedKeysRedesign(apps, schema_editor):
    Chart = apps.get_model('grapher_admin', 'Chart')
    Variable = apps.get_model('grapher_admin', 'Variable')
    with transaction.atomic():
        for chart in Chart.objects.all():
            config = json.loads(chart.config)
            
            if 'selected-countries' in config:                
                mainDimensions = [dim for dim in config['chart-dimensions'] if dim['property'] == 'y']
                if config.get('group-by-variables'):
                    mainDimensions.reverse()

                selection = []

                for entity in reversed(sorted(config['selected-countries'], key=lambda e: int(e['id']))):
                    for i, dim in enumerate(mainDimensions):
                        index = i
                        if config.get('group-by-variables'):
                            index = len(mainDimensions)-1-i
                        sel = { 'entityId': int(entity['id']), 'index': index }

                        color = entity.get('color', None) or dim.get('color', None)
                        if color:
                            sel['color'] = color
                        selection.append(sel)

                print(config['selected-countries'])
                print(selection)
                print()

                config['selectedData'] = selection
                del config['selected-countries']

            if 'chart-time' in config:
                timeDomain = config.get('chart-time')

                minTime = None
                maxTime = None

                if timeDomain:
                    if len(timeDomain) > 0:
                        try:
                            minTime = int(timeDomain[0])
                        except:
                            pass
                    if len(timeDomain) > 1:
                        try:
                            maxTime = int(timeDomain[1])
                        except:
                            pass

                if chart.type == "ScatterPlot" and config.get("timeline", None) is None:
                    minTime = maxTime

                if minTime is not None:
                    config['minTime'] = minTime
                if maxTime is not None:
                    config['maxTime'] = maxTime
                del config['chart-time']

            if chart.type == "DiscreteBar":
                config['add-country-mode'] = 'disabled'

            if 'form-config' in config:
                del config['form-config']

            # Put units onto variables
            xShortUnit = config['xAxis'].get('prefix') or config['xAxis'].get('suffix')
            yShortUnit = config['yAxis'].get('prefix') or config['yAxis'].get('suffix')
            for dimension in config['chart-dimensions']:
                if xShortUnit and dimension['property'] == 'x':
                    variable = Variable.objects.get(id=dimension['variableId'])
                    print(variable.name, xShortUnit)
                    variable.short_unit = xShortUnit
                    variable.save()
                if yShortUnit and dimension['property'] == 'y':
                    variable = Variable.objects.get(id=dimension['variableId'])
                    print(variable.name, yShortUnit)
                    variable.short_unit = yShortUnit
                    variable.save()

            chart.config = json.dumps(config)
            chart.save()

class Migration(migrations.Migration):
    dependencies = [
        ('grapher_admin', '0004_axis_config_cleanup'),
    ]
    operations = [
        migrations.RunPython(selectedKeysRedesign),
    ]