# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2017-09-06 23:37
from __future__ import unicode_literals
from django.db import migrations, models, transaction
import json

def migrate(apps, schema_editor):
    Chart = apps.get_model('grapher_admin', 'Chart')
    Variable = apps.get_model('grapher_admin', 'Variable')
    with transaction.atomic():
        for chart in Chart.objects.all():
            config = json.loads(chart.config)
            
            if 'chart-description' in config:
                if config.get('chart-description'):
                    config['note'] = config.get('chart-description')
                del config['chart-description']

            if 'sourceDesc' in config and not config.get('sourceDesc'):
                del config['sourceDesc']

            if 'subtitle' in config and not config.get('subtitle'):
                del config['subtitle']

            if 'internalNotes' in config and not config.get('internalNotes'):
                del config['internalNotes']

            if 'map-config' in config:
                config['map'] = config['map-config']
                del config['map-config']

            if 'add-country-mode' in config:
                config['addCountryMode'] = config['add-country-mode']
                del config['add-country-mode']

            if 'default-tab' in config:
                config['tab'] = config['default-tab']
                del config['default-tab']

            if 'hide-legend' in config:
                config['hideLegend'] = config['hide-legend']
                del config['hide-legend']
            
            if 'hide-toggle' in config:
                config['hideRelativeToggle'] = config['hide-toggle']
                del config['hide-toggle']

            if 'entity-type' in config:
                config['entityType'] = config['entity-type']
                del config['entity-type']

            if 'currentStackMode' in config:
                config['stackMode'] = config['currentStackMode']
                del config['currentStackMode']

            if 'logosSVG' in config:
                del config['logosSVG']
            
            if 'data' in config:
                del config['data']

            if 'cache' in config:
                del config['cache']
            
            chart.config = json.dumps(config)
            chart.save()



class Migration(migrations.Migration):
    dependencies = [
        ('grapher_admin', '0007_auto_20170814_0959'),
    ]

    operations = [
        migrations.RunPython(migrate),
    ]
